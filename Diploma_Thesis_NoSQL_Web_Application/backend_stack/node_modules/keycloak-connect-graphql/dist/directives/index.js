"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeycloakSchemaDirectives = void 0;
const schemaDirectiveVisitors_1 = require("./schemaDirectiveVisitors");
/**
 * Object that contains directive implementations for Apollo Server. Pass this into Apollo Server
 * to enable schemaDirectives such as `@auth` and `@hasRole`
 *
 * Example usage:
 *
 * ```javascript
 * const typeDefs = gql`
 *   type Query {
 *     hello: String! @auth
 *   }
 *
 *   type mutation {
 *     changeSomething(arg: String!): String! @hasRole(role: "admin")
 *   }
 * `
 * const server = new ApolloServer({
 *   typeDefs,
 *   resolvers,
 *   schemaDirectives: [KeycloakSchemaDirectives],
 *   context: ({ req }) => {
  *     return {
  *       kauth: new KeycloakContext({ req })
  *     }
  *   }
 * })
 * ```
 */
exports.KeycloakSchemaDirectives = {
    auth: schemaDirectiveVisitors_1.AuthDirective,
    hasRole: schemaDirectiveVisitors_1.HasRoleDirective,
    hasPermission: schemaDirectiveVisitors_1.HasPermissionDirective
};
__exportStar(require("./directiveResolvers"), exports);
//# sourceMappingURL=index.js.map